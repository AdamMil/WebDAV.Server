<?xml version="1.0" encoding="utf-8" ?>
<DAV>
  <ConditionCode>
    <Equals>
      <summary>Determines whether this <see cref="ConditionCode"/> is equivalent to the given condition code.</summary>
    </Equals>
  </ConditionCode>

  <IElementValue>
    <GetNamespaces>
      <summary>
        Returns the XML namespaces used by the property value, or null if the value does not use any namespaces. It is not necessary
        to include the <c>DAV:</c> namespace.
      </summary>
    </GetNamespaces>
    <WriteValue>
      <summary>
        Writes the value into XML. Any namespaces used by the value will already have been defined in the enclosing context, so no
        new <c>xmlns</c> attributes should be added.
      </summary>
    </WriteValue>
  </IElementValue>

  <ILockManager>
    <AddLock>
      <summary>Adds a new resource lock if no conflicting lock exists.</summary>
      <param name="absolutePath">The absolute, canonical path to the resource to lock.</param>
      <param name="type">The type of lock to add.</param>
      <param name="recursive">
        True if the lock should apply recursively to all descendant resources as well, or false if it should only
        apply to the resource named by <paramref name="absolutePath"/>.
      </param>
      <param name="timeoutSeconds">
        The requested timeout before the lock expires, in seconds, or zero if the lock should not expire, or null to use the default
        lock timeout. The lock manager may override the timeout specified.
      </param>
      <param name="ownerData">
        An <see cref="XmlElement"/> containing the <c>DAV:owner</c> element supplied by the client with the lock request, or null if no
        <c>owner</c> element was supplied.
      </param>
      <param name="serverData">
        An <see cref="XmlElement"/> containing arbitrary data the server wishes to associated with the lock, or null if no additional data
        is to be associated with the lock.
      </param>
      <returns>An <see cref="ActiveLock"/> object representing the newly-added lock.</returns>
      <exception cref="ArgumentNullException">Thrown if <paramref name="absolutePath"/> is null.</exception>
      <exception cref="ArgumentException">Thrown if <paramref name="absolutePath"/> is not absolute.</exception>
      <exception cref="LockConflictException">Thrown if there is a conflict with an existing lock.</exception>
      <exception cref="LockLimitReachedException">Thrown if adding the lock would cause a lock limit to be exceeded.</exception>
    </AddLock>
    <GetConflictingLocks>
      <summary>Returns a collection of existing locks that conflict with the given proposed lock.</summary>
      <param name="absolutePath">The absolute, canonical path to the resource to propose to lock.</param>
      <param name="type">The proposed type of lock to add.</param>
      <param name="recursive">
        True if the lock would apply recursively to all descendant resources as well, or false if it would only
        apply to the resource named by <paramref name="absolutePath"/>.
      </param>
      <exception cref="ArgumentNullException">Thrown if <paramref name="absolutePath"/> or <paramref name="type"/> is null.</exception>
      <exception cref="ArgumentException">Thrown if <paramref name="absolutePath"/> is not absolute.</exception>
    </GetConflictingLocks>
    <GetLock>
      <summary>Returns the <see cref="ActiveLock"/> with the specified lock token and path, or null if no matching lock exists.</summary>
      <param name="lockToken">The lock token of the lock to retrieve.</param>
      <param name="absolutePath">If specified, the lock must also contain the given path within its scope. If null, only the lock token
      must match. This should be the absolute, canonical path to a resource.
      </param>
      <exception cref="ArgumentNullException">Thrown if <paramref name="lockToken"/> is null.</exception>
      <exception cref="ArgumentException">Thrown if <paramref name="absolutePath"/> is specified but not absolute.</exception>
    </GetLock>
    <GetLocks>
      <summary>Returns the locks at, above, and/or below a resource in the URL hierarchy.</summary>
      <param name="absolutePath">The absolute, canonical path to the resource whose locks will be returned.</param>
      <param name="includeInheritedLocks">If true, locks inherited from ancestor resources will be returned.</param>
      <param name="includeDescendantLocks">If true, locks directly applied to descendant resources will be returned.</param>
      <param name="filter">If not null, only locks for which the filter predicate returns true will be returned from the method.</param>
      <returns>
        Returns a list of the locks directly applied to the given resource. In addition, if <paramref name="includeInheritedLocks"/>
        is true, locks inherited by the resource will be included in the list, and if <paramref name="includeDescendantLocks"/> is true,
        locks directly applied to descendant resources will be included in the list. All locks will be filtered through
        <paramref name="filter"/> if <paramref name="filter"/> is not null.
      </returns>
      <exception cref="ArgumentNullException">Thrown if <paramref name="absolutePath"/> is null.</exception>
      <exception cref="ArgumentException">Thrown if <paramref name="absolutePath"/> is not absolute.</exception>
    </GetLocks>
    <RefreshLock>
      <summary>Refreshes the given lock timeout. Returns true if the lock timeout was refreshed and false if it was not.</summary>
      <param name="activeLock">The lock whose timeout should be refreshed.</param>
      <param name="timeoutSeconds">
        The requested timeout before the lock expires, in seconds, or zero if the lock should not expire, or
        null to use the previous timeout value. The lock manager may override the timeout value specified.
      </param>
      <remarks>
        The lock manager is not required to refresh any lock. False may be returned if the lock manager declines to refresh the
        lock, or if the lock does not exist in the lock manager.
      </remarks>
      <exception cref="ArgumentNullException">Thrown if <paramref name="activeLock"/> is null.</exception>
    </RefreshLock>
    <RemoveLock>
      <summary>Removes the given lock. Returns true if the lock was removed and false if the lock did not exist in the lock manager.</summary>
      <exception cref="ArgumentNullException">Thrown if <paramref name="activeLock"/> is null.</exception>
    </RemoveLock>
    <RemoveLocks>
      <summary>Removes all locks at (and possibly below) a resource in the URL hierarchy. Returns true if the locks were removed
        successfully and false if the locks could not be removed.
      </summary>
      <param name="absolutePath">The absolute, canonical path to the resource whose locks will be removed.</param>
      <param name="removal">A <see cref="LockRemoval"/> value that specifies which locks will be removed.</param>
      <returns>
        If <paramref name="removal"/> is <see cref="LockRemoval.RequireEmpty"/> and descendant locks exist, no locks are removed and false
        is returned. Otherwise, all locks are removed and true is returned.
      </returns>
      <exception cref="ArgumentNullException">Thrown if <paramref name="absolutePath"/> is null.</exception>
      <exception cref="ArgumentException">Thrown if <paramref name="absolutePath"/> is not absolute.</exception>
    </RemoveLocks>
  </ILockManager>

  <IPropertyStore>
    <ClearProperties>
      <summary>Removes all dead properties associated with a resource.</summary>
      <param name="absolutePath">The absolute, canonical path to the resource whose properties will be removed.</param>
      <param name="recursive">
        If true, the properties of descendant resources will be cleared as well. This parameter should be true unless it is impossible for
        the resource to have descendants.
      </param>
      <exception cref="ArgumentNullException">Thrown if <paramref name="absolutePath"/> is null.</exception>
      <exception cref="ArgumentException">Thrown if <paramref name="absolutePath"/> is not absolute.</exception>
    </ClearProperties>
    <GetProperties>
      <summary>Returns all dead properties associated with a resource.</summary>
      <param name="absolutePath">The absolute, canonical path to the resource whose properties will be returned.</param>
      <exception cref="ArgumentNullException">Thrown if <paramref name="absolutePath"/> is null.</exception>
      <exception cref="ArgumentException">Thrown if <paramref name="absolutePath"/> is not absolute.</exception>
    </GetProperties>
    <RemoveProperties>
      <summary>Returns all dead properties associated with a resource.</summary>
      <param name="absolutePath">The absolute, canonical path to the resource whose properties will be removed.</param>
      <param name="propertyNames">A set of property names to remove.</param>
      <exception cref="ArgumentNullException">Thrown if <paramref name="absolutePath"/> or <paramref name="propertyNames"/> is null.</exception>
      <exception cref="ArgumentException">
        Thrown if <paramref name="absolutePath"/> is not absolute or if <paramref name="propertyNames"/> contains a null reference.
      </exception>
    </RemoveProperties>
    <SetProperties>
      <summary>
        Associates dead properties with a resource. This method will overwrite existing properties with the same name, but other
        existing properties will not be removed.
      </summary>
      <param name="absolutePath">The absolute, canonical path to the resource whose properties will be set.</param>
      <param name="properties">A collection of dead properties to add.</param>
      <exception cref="ArgumentNullException">Thrown if <paramref name="absolutePath"/> or <paramref name="properties"/> is null.</exception>
      <exception cref="ArgumentException">
        Thrown if <paramref name="absolutePath"/> is not absolute or if <paramref name="properties"/> contains a null value.
      </exception>
    </SetProperties>
  </IPropertyStore>
  
  <IWebDAVResource>
    <CanonicalPath>
      <summary>Gets the canonical path to this resource, relative to the <see cref="WebDAVContext.ServiceRoot"/>.</summary>
      <remarks>
        Since it's relative, the path must not begin with a slash. The path for a collection resource should end with a slash, but not if
        it would result in the path beginning with a slash. (The canonical relative path to the root resource is the empty string.) Since
        it's canonical, the path must not contain any unnecessarily encoded characters. In particular, you should not use
        <see cref="System.Web.HttpUtility.UrlPathEncode"/> to construct the path, since it encodes characters unnecessarily and so does not
        produce a canonical path. Only the question mark (<c>?</c>), percent sign (<c>%</c>), and number sign (<c>#</c>) should be escaped
        (as <c>%3f</c>, <c>%25</c>, and <c>%23</c>, respectively). <see cref="DAVUtility.CanonicalPathEncode"/> will perform the
        appropriate encoding for you.
      </remarks>
    </CanonicalPath>
    <CopyOrMove>
      <summary>
        Executes a <see cref="CopyOrMoveRequest"/>. All DAV-compliant resources must support the <c>COPY</c> and <c>MOVE</c> methods (i.e.
        they cannot respond with 405 Method Not Allowed), although they can disable copies and moves by responding with 403 Forbidden.
        See the <see cref="CopyOrMoveRequest"/> documentation for details on how to service it.
      </summary>
    </CopyOrMove>
    <Delete>
      <summary>Executes a <see cref="DeleteRequest"/>. See the <see cref="DeleteRequest"/> documentation for details on how to service it.</summary>
    </Delete>
    <GetEntityMetadata>
      <summary>Returns an <see cref="EntityMetadata"/> object describing the resource's entity body.</summary>
      <param name="includeEntityTag">
        If true, the resource's <see cref="EntityTag"/> should be included in the metadata if possible. (Failure to include it may cause
        requests to fail.) If false, the <see cref="EntityTag"/> should only be included if it can be efficiently obtained.
      </param>
      <remarks>
        <note type="caution">
          Because <see cref="EntityMetadata"/> is a mutable object, implementors are recommended to use <see cref="EntityMetadata.Clone"/>
          to return a copy of the metadata if the metadata is cached between invocations.
        </note>
      </remarks>
    </GetEntityMetadata>
    <GetOrHead>
      <summary>
        Executes a <see cref="GetOrHeadRequest"/>. See the <see cref="GetOrHeadRequest"/> documentation for details on how to service it.
      </summary>
    </GetOrHead>
    <HandleGenericRequest>
      <summary>
        Called to handle a request that is not handled by any other another method. The method must return true if it responded to the
        request and false otherwise, in which case the <see cref="IWebDAVService"/> will be allowed to handle the request.
      </summary>
    </HandleGenericRequest>
    <Lock>
      <summary>Executes a <see cref="LockRequest"/>. See the <see cref="LockRequest"/> documentation for details on how to service it.</summary>
    </Lock>
    <Options>
      <summary>
        Executes an <see cref="OptionsRequest"/>. See the <see cref="OptionsRequest"/> documentation for details on how to service it.
      </summary>
    </Options>
    <Post>
      <summary>Executes a <see cref="PostRequest"/>. See the <see cref="PostRequest"/> documentation for details on how to service it.</summary>
    </Post>
    <PropFind>
      <summary>
        Executes a <see cref="PropFindRequest"/>. All DAV-compliant resources must support the <c>PROPFIND</c> method (i.e. they cannot
        respond with 405 Method Not Allowed). See the <see cref="PropFindRequest"/> documentation for details on how to service it.
      </summary>
    </PropFind>
    <PropPatch>
      <summary>
        Executes a <see cref="PropPatchRequest"/>. All DAV-compliant resources must support the <c>PROPPATCH</c> method (i.e. they cannot
        respond with 405 Method Not Allowed), although they can disable property setting by responding with 403 Forbidden (either for the
        request as a whole or for individual properties). Resources should allow the setting of arbitrary (dead) properties. See the
        <see cref="PropPatchRequest"/> documentation for more details on how to service it.
      </summary>
    </PropPatch>
    <Put>
      <summary>Executes a <see cref="PutRequest"/>. See the <see cref="PutRequest"/> documentation for details on how to service it.</summary>
    </Put>
    <ShouldDenyAccess>
      <summary>Determines whether the user making a request should be denied access to a resource related to the request.</summary>
      <param name="context">The <see cref="WebDAVContext"/> in which the request is executing.</param>
      <param name="service">The <see cref="IWebDAVService"/> containing the resource. This is not necessarily the same as
        <see cref="WebDAVContext.Service"/>.
      </param>
      <param name="denyExistence">
        If the user is to be denied access, this variable should receive a value that indicates whether the
        WebDAV service should deny the existence of the resource requested by the user by pretending that it was not found. If the user is
        allowed access, the value of this variable is ignored.
      </param>
      <returns>
        True if the user should be denied access, or false if the user may be permitted access. The user will be allowed access only
        if all calls to <c>ShouldDenyAccess</c> return false.
      </returns>
    </ShouldDenyAccess>
    <Unlock>
      <summary>Executes an <see cref="UnlockRequest"/>. See the <see cref="UnlockRequest"/> documentation for details on how to service it.</summary>
    </Unlock>
  </IWebDAVResource>

  <IWebDAVService>
    <CreateAndLock>
      <summary>
        Executes a <see cref="LockRequest"/> against an unmapped URL. See the <see cref="LockRequest"/> documentation for details on
        how to service it.
      </summary>
    </CreateAndLock>
    <CreateCopyOrMove>
      <summary>
        Creates a new <see cref="CopyOrMoveRequest"/> object (or an object of a derived type) to serve a <c>COPY</c> or <c>MOVE</c>
        request.
      </summary>
    </CreateCopyOrMove>
    <CreateDelete>
      <summary>Creates a new <see cref="DeleteRequest"/> object (or an object of a derived type) to serve a <c>DELETE</c> request.</summary>
    </CreateDelete>
    <CreateGetOrHead>
      <summary>
        Creates a new <see cref="GetOrHeadRequest"/> object (or an object of a derived type) to serve a <c>GET</c> or <c>HEAD</c> request.
      </summary>
    </CreateGetOrHead>
    <CreateLock>
      <summary>Creates a new <see cref="LockRequest"/> object (or an object of a derived type) to serve a <c>LOCK</c> request.</summary>
    </CreateLock>
    <CreateMkCol>
      <summary>Creates a new <see cref="MkColRequest"/> object (or an object of a derived type) to serve a <c>MKCOL</c> request.</summary>
    </CreateMkCol>
    <CreateOptions>
      <summary>Creates a new <see cref="OptionsRequest"/> object (or an object of a derived type) to serve an <c>OPTIONS</c> request.</summary>
    </CreateOptions>
    <CreatePost>
      <summary>Creates a new <see cref="PostRequest"/> object (or an object of a derived type) to serve a <c>POST</c> request.</summary>
    </CreatePost>
    <CreatePropFind>
      <summary>Creates a new <see cref="PropFindRequest"/> object (or an object of a derived type) to serve a <c>PROPFIND</c> request.</summary>
    </CreatePropFind>
    <CreatePropPatch>
      <summary>Creates a new <see cref="PropPatchRequest"/> object (or an object of a derived type) to serve a <c>PROPPATCH</c> request.</summary>
    </CreatePropPatch>
    <CreatePut>
      <summary>Creates a new <see cref="PutRequest"/> object (or an object of a derived type) to serve a <c>PUT</c> request.</summary>
    </CreatePut>
    <CreateUnlock>
      <summary>Creates a new <see cref="UnlockRequest"/> object (or an object of a derived type) to serve an <c>UNLOCK</c> request.</summary>
    </CreateUnlock>
    <HandleGenericRequest>
      <summary>
        Called to handle a request that is not handled by any other another method. The method must return true if it responded to the
        request and false otherwise, in which case the server will generate a default response.
      </summary>
      <remarks>
        If the request URL mapped to a resource, <see cref="IWebDAVResource.HandleGenericRequest"/> will be called first to give the
        resource a chance to handle the request, and this method will only be called if the resource declines to handle it.
      </remarks>
    </HandleGenericRequest>
    <IsReusable>
      <summary>
        Gets whether the service object is safe for reuse across multiple requests. In order to be safe, a service must be
        able to be accessed simultaneously by multiple threads, and should not fail in a way that would affect its operation on later
        requests.
      </summary>
      <remarks>It is recommended that services be made reusable if possible, as this improves performance.</remarks>
    </IsReusable>
    <MakeCollection>
      <summary>
        Executes a <see cref="MkColRequest"/>. All DAV-compliant services must support the <c>MKCOL</c> method (i.e. they cannot
        respond with 405 Method Not Allowed), although they can disable collection creation by responding with 403 Forbidden.
        See the <see cref="MkColRequest"/> documentation for details on how to service it.
      </summary>
    </MakeCollection>
    <Options>
      <summary>
        Executes an <see cref="OptionsRequest"/> that was not mapped to any URL. See the <see cref="OptionsRequest"/> documentation for
        details on how to service it.
      </summary>
    </Options>
    <Post>
      <summary>
        Executes a <see cref="PostRequest"/> that was not mapped to any URL. See the <see cref="PostRequest"/> documentation for
        details on how to service it.
      </summary>
    </Post>
    <Put>
      <summary>
        Executes a <see cref="PutRequest"/> that was not mapped to any URL. See the <see cref="PutRequest"/> documentation for
        details on how to service it.
      </summary>
    </Put>
    <ResolveResource>
      <summary>
        Resolves the given resource path to the corresponding <see cref="IWebDAVResource"/>, or returns null if the path does not map to
        any resource.
      </summary>
      <param name="context">The <see cref="WebDAVContext"/> for the request. See the remarks for important details.</param>
      <param name="resourcePath">
        The relative path to the resource. This path is relative to the root of the current service, but that may not match
        <see cref="WebDAVContext.ServiceRoot"/>. See the remarks for more details.
      </param>
      <remarks>
        <note type="caution">
          Although <paramref name="context"/> is the context for the current request, it will not necessarily correspond to the current
          service. In particular, <see cref="WebDAVContext.RequestPath"/> may not match <paramref name="resourcePath"/> and
          <see cref="WebDAVContext.ServiceRoot"/> may not be the root of the current service or the base of
          <paramref name="resourcePath"/>. This will happen when one service attempts to resolve a URL belong to another service, for
          example when processing a cross-service <c>COPY</c> request or when the client submits a tagged <c>If</c> header specifying a URL
          belonging to another service. Therefore, the implementation of this method should not rely on request-specific details to perform
          the resolution. 
        </note>
      </remarks>
    </ResolveResource>
    <Unlock>
      <summary>
        Executes an <see cref="UnlockRequest"/> against an unmapped URL. See the <see cref="UnlockRequest"/> documentation for details on
        how to service it.
      </summary>
      <remarks>
        <c>UNLOCK</c> requests may be made against unmapped URLs in the case that a resource is locked and then later deleted from outside
        the WebDAV service. (For instance, a file on disk may be locked through WebDAV but later deleted by a user.) Allowing <c>UNLOCK</c>
        requests on unmapped URLs provides a way for these dangling locks to be released.
      </remarks>
    </Unlock>
  </IWebDAVService>

  <LockManager>
    <Dispose>
      <summary>Called to dispose the lock manager.</summary>
      <param name="manualDispose">False if the method was called from the finalizer and true if not.</param>
      <remarks>This method should be overriden by derived lock managers to flush lock data to persistent storage.</remarks>
    </Dispose>
    <OnLockAdded>
      <summary>Called after a lock has been added to the lock manager.</summary>
      <param name="newLock">The new lock.</param>
      <remarks>
        <note type="caution">
          The lock manager remains locked while this method is called, so the method should not perform slow operations such
          as accessing a disk, database, or network service. It's recommended to perform such operations asynchronously.
        </note>
      </remarks>
    </OnLockAdded>
    <OnLockRemoved>
      <summary>Called after a lock has been removed from the lock manager.</summary>
      <param name="lockObject">The lock that was removed.</param>
      <remarks>
        <note type="caution">
          The lock manager remains locked while this method is called, so the method should not perform slow operations such
          as accessing a disk, database, or network service. It's recommended to perform such operations asynchronously.
        </note>
        This method may be called any time an expired lock is discovered and removed, including during calls to methods such as
        <see cref="LockManager.GetAllLocks"/>. The implementation of <see cref="OnLockRemoved"/> must therefore be reentrant if it calls
        any lock manager methods that access locks.
      </remarks>
    </OnLockRemoved>
    <OnLockUpdated>
      <summary>Called after a lock has been updated by the lock manager, usually to refresh it.</summary>
      <param name="lockObject">The lock that was updated.</param>
      <remarks>
        <note type="caution">
          The lock manager remains locked while this method is called, so the method should not perform slow operations such
          as accessing a disk, database, or network service. It's recommended to perform such operations asynchronously.
        </note>
      </remarks>
    </OnLockUpdated>
  </LockManager>

  <PropertyStore>
    <Dispose>
      <summary>Called to dispose the property store.</summary>
      <param name="manualDispose">False if the method was called from the finalizer and true if not.</param>
      <remarks>This method should be overriden by derived property stores to flush property data to persistent storage.</remarks>
    </Dispose>
    <OnPropertiesChanged>
      <summary>Called when a resources's properties have changed.</summary>
      <param name="absolutePath">The absolute path to the resource.</param>
      <param name="newProperties">
        The dictionary containing the resource's new property set, or null if all of the resource's properties
        were removed. This dictionary should not be modified.
      </param>
      <remarks>
        <note type="caution">
          The lock manager remains locked while this method is called, so the method should not perform slow operations such
          as accessing a disk, database, or network service. It's recommended to perform such operations asynchronously.
        </note>
      </remarks>      
    </OnPropertiesChanged>
  </PropertyStore>
  
  <WebDAVContext>
    <OpenRequestBody>
      <summary>
        Returns the request stream after decoding it according to the <c>Content-Encoding</c> header. The returned should be closed
        when you are done reading from it.
      </summary>
      <remarks>
        This method supports the <c>gzip</c>, <c>deflate</c>, and <c>identity</c> content encodings. Any other content encoding will
        cause a <see cref="WebDAVException"/> to be thrown with a 415 Unsupported Media Type status. If you need to support additional
        content encodings, you must do so yourself, using the <see cref="HttpRequest.InputStream"/> directly.
      </remarks>
    </OpenRequestBody>
    <OpenResponseBody>
      <summary>
        Returns the response stream after encoding it according to the <c>Accept-Encoding</c> header. The returned stream should be
        closed when you are done writing to it.
      </summary>
      <remarks>
        This method supports the <c>gzip</c>, <c>deflate</c>, and <c>identity</c> content encodings. Any other content encoding will
        cause a <see cref="WebDAVException"/> to be thrown with a 406 Not Acceptable status. If you need to support additional content
        encodings, you must do so yourself, using the <see cref="HttpResponse.OutputStream"/> directly.
      </remarks>
    </OpenResponseBody>
  </WebDAVContext>

  <WebDAVModule>
    <ResolveUri>
      <summary>
        In the context of the given <paramref name="context"/>, attempts to resolve a URL into an <see cref="IWebDAVService"/> and
        <see cref="IWebDAVResource"/>. Returns true if the URL could be successfully resolved into an <see cref="IWebDAVResource"/>, and
        false otherwise. (Note that even if the method returns false, variables besides <paramref name="resource"/> may still be set.)
      </summary>
      <param name="context">The <see cref="WebDAVContext"/> in which the request is being executed.</param>
      <param name="uri">
        A <see cref="Uri"/> to resolve. This can either be an absolute URI (i.e. a URI with a scheme and authority) or a
        relative URI with an absolute path (i.e. a URI constructed from a path beginning with a slash). If the URI is relative, the
        authority of the request URI will be used.
      </param>
      <param name="service">
        A variable that will receive the <see cref="IWebDAVService"/> corresponding to the <paramref name="uri"/>, or
        null if the <paramref name="uri"/> does not correspond to any defined service location. This variable may be set to a valid service
        even if the method returns false.
      </param>
      <param name="resource">
        A variable that will receive the <see cref="IWebDAVResource"/> corresponding to the <paramref name="uri"/>.
      </param>
      <param name="serviceRoot">
        A variable that will receive the absolute path to the <paramref name="service"/> root. This variable will
        be valid whenever <paramref name="service"/> is not null.
      </param>
      <param name="relativePath">
        A variable that will receive the path to the resource named by the <paramref name="uri"/>, relative to
        the <paramref name="serviceRoot"/>. This variable will be valid whenever <paramref name="service"/> is not null.
      </param>
      <remarks>
        If the <see cref="IWebDAVService.IsReusable"/> property of the returned <see cref="IWebDAVService"/> is false, you should dispose
        it if it implements <see cref="IDisposable"/>.
      </remarks>
    </ResolveUri>

    <ShouldDenyAccess>
      <summary>
        Determines whether the user should be denied access to the resource at the given <see cref="Uri"/>. If the URI does not map
        to a resource, this method will return false.
      </summary>
      <param name="context">The <see cref="WebDAVContext"/> in which the request is being executed.</param>
      <param name="uri">
        A <see cref="Uri"/> identifying a resource. This can either be an absolute URI (i.e. a URI with a scheme and
        authority) or a relative URI with an absolute path (i.e. a URI constructed from a path beginning with a slash). If the URI is
        relative, the authority of the request URI will be used.
      </param>
    </ShouldDenyAccess>
  </WebDAVModule>
  
  <WebDAVRequest>
    <CheckSubmittedLockTokens>
      <summary>
        Checks that the client has submitted all required lock tokens. If so, this method returns null. If not, the method returns
        a <see cref="ConditionCode"/> containing the error that should be returned to the client. Note that you generally do not need to
        call this method manually, as both <see cref="WebDAVRequest.CheckPreconditions"/> and the <c>ProcessStandardRequest</c> methods of
        derived classes invoke this method automatically.
      </summary>
    </CheckSubmittedLockTokens>
    <CheckSubmittedLockTokensCore>
      <summary>
        Checks that the client has submitted all required lock tokens. If so, this method returns null. If not, the method returns
        a <see cref="ConditionCode"/> containing the error that should be returned to the client.
      </summary>
      <param name="lockType">
        A <see cref="LockType"/> that would conflict with the locks that you want to check for. Typically, this is
        an exclusive lock of a type that protects the operation being performed by the request. For instance, a <c>PUT</c> request would
        usually pass <see cref="LockType.ExclusiveWrite"/> for the lock type because it would conflict with (and therefore match) any other
        write locks on the resource, while ignoring non-write locks.
      </param>
      <param name="checkParent">
        If true, the parent resource will be checked for a lock as well. You should pass true when the operation will change the
        parent collection, for instance when adding, renaming, or deleting an item. Pass false when the operation only modifies the
        content or properties of an existing item.
      </param>
      <param name="checkDescendants">
        If true, locks on descendant items will be checked if there is no lock directly on the resource. You should typically pass true if
        the operation affects all descendant items of the resource, and pass false otherwise.
      </param>
    </CheckSubmittedLockTokensCore>
    <ParseRequest>
      <summary>Parses and validates the request.</summary>
      <exception cref="System.Xml.XmlException">Thrown if the request body XML is invalid.</exception>
      <exception cref="WebDAVException">Thrown if the request is invalid.</exception>
    </ParseRequest>
    <WriteResponse>
      <summary>
        Validates the processing performed by the <see cref="IWebDAVService"/> and writes the response to the client.
      </summary>
      <exception cref="ContractViolationException">
        Thrown if the <see cref="IWebDAVService"/> that serviced the request failed to service it properly.
      </exception>
    </WriteResponse>
  </WebDAVRequest>

  <GetOrHeadRequest>
    <IndexItem>
      <Cons>
        <param name="name">
          The name of the item displayed in the index and also the path segment appended to the request URL to form the
          URL of the item's resource.
        </param>
        <param name="isDirectory">Indicates whether the item represents a directory (collection member) or a file (non-collection member).</param>
        <param name="lastModificationTime">The time that the item content was last changed, or null if the time is unknown.</param>
        <param name="size">The size of the item content, or -1 if the size is unknown or inapplicable.</param>
      </Cons>
    </IndexItem>
    <WriteStandardResponse>
      <summary>Writes a typical response to a <c>GET</c> or <c>HEAD</c> request.</summary>
      <param name="entityBody">A <see cref="Stream"/> containing the entity body. It is best if the stream is seekable.</param>
      <param name="mediaType">The RFC 2616 <c>media-type</c> of the entity. If null, no media type will be sent to the client.</param>
      <param name="metadata">
        Metadata about the entity body. As much information should be provided as possible. If <see cref="EntityMetadata.MediaType"/> is
        null, no media type will be sent to the client. If <see cref="EntityMetadata.Length"/> is null, the length will be taken from
        <paramref name="entityBody"/> if the stream is seekable. If <see cref="EntityMetadata.EntityTag"/> is null, an entity tag will be
        taken from the <c>ETag</c> header if it has been set or computed from the stream (using
        <see cref="DAVUtility.ComputeEntityTag(Stream,bool)"/>) if the stream is seekable. If <see cref="EntityMetadata.LastModifiedTime"/>
        is null, the last modification time will be taken from the <c>Last-Modified</c> header if it has been set. If the entity tag or
        last modification time is unavailable, request preconditions (e.g. <c>If-Match</c> or <c>If-Unmodified-Since</c> headers) cannot be
        processed correctly, but the method will attempt to do the best it can with the available information.
      </param>
      <remarks>
        This method implements standard <c>GET</c> and <c>HEAD</c> mechanisms. It respects the HTTP <c>Range</c> header and will
        provide partial responses if necessary, including multi-range partial responses. It uses
        <see cref="DAVUtility.ComputeEntityTag(Stream,bool)" /> to compute the entity tag of the body when possible. It is capable of
        working with unseekable streams, although partial responses cannot be provided for unseekable streams if the length is not known,
        and the entity tag cannot be automatically computed for unseekable streams. It provides the <c>Accept-Ranges</c>,
        <c>Content-Length</c>, <c>Content-Range</c>, <c>Content-Type</c>, <c>ETag</c>, and <c>Last-Modified</c> headers to the client as
        appropriate. If you want to send additional headers, you must add them to the response before calling this method, as the method
        may disable output buffering before writing the entity body.
      </remarks>
    </WriteStandardResponse>
  </GetOrHeadRequest>

  <PropFindRequest>
    <ProcessStandardRequest>
      <summary>
        Implements standard <c>PROPFIND</c> processing for a non-collection resource, given a dictionary containing all of the
        resource's properties.
      </summary>
    </ProcessStandardRequest>
    <ProcessStandardRequestRec>
      <summary>Implements standard <c>PROPFIND</c> processing for a collection resource.</summary>
      <typeparam name="T">A value type representing the resources to be processed.</typeparam>
      <param name="rootValue">
        The value of the initial value being processed, which should correspond to the request resource. This
        parameter is not directly interpreted by the method, but is passed to <paramref name="getChildren"/>, etc.
      </param>
      <param name="getMemberName">
        Given a value representing a resource, returns the canonical name of the path segment that maps to the resource within the
        collection. If the resource is the request resource itself, an empty string should be returned. Otherwise, if the resource is a
        child collection, the member name should end with a trailing slash.
      </param>
      <param name="getChildren">
        Given a value representing a resource and its path, returns the values representing the resource's children, if any. If
        null, the root resource will be processed as though it was a non-collection resource. It is valid for the delegate to return null
        for non-collection resources, as a null return will be interpreted to mean that the resource has no children.
      </param>
      <remarks>
        The URLs returned to the client will be based on the <see cref="WebDAVContext.RequestPath"/> rather than the request resource's
        <see cref="IWebDAVResource.CanonicalPath" />. This allows resources from one part of the URL namespace to be linked within a
        collection that resides in another part of the URL namespace, if desired.
      </remarks>
    </ProcessStandardRequestRec>
  </PropFindRequest>

  <PropFindResource>
    <SetValueNIRemarks>
      <remarks>
        If the property is a built-in WebDAV property (i.e. one defined in RFC 4918), the specified type will be ignored as per RFC 4316
        which states in section 5 that the property must not have a data type already defined in the WebDAV specification.
        If the value is not null and the property data type is known, the value will be validated against the the data type. Currently, the
        known property types are the types of built-in WebDAV properties as well as most types defined in the
        <c>http://www.w3.org/2001/XMLSchema</c> namespace (e.g. xs:boolean, xs:int, etc).
      </remarks>
    </SetValueNIRemarks>
  </PropFindResource>
</DAV>
